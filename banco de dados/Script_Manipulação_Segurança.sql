USE LOJA_CELULAR;

/* View que retorna movimentação geral do estoque em ordem decrescente*/

CREATE VIEW MOVIMENTACAO_GERAL AS
SELECT MOVIMENTACAO.ID, PRODUTO.NOME_PRODUTO, DEPOSITO.NOME_DEPOSITO, PRODUTO.PRECO_PRODUTO, MOVIMENTACAO.QTD_MOVIMENTACAO,
CASE
WHEN MOVIMENTACAO.TIPO_MOVIMENTACAO = 1 THEN 'ENTRADA'
WHEN MOVIMENTACAO.TIPO_MOVIMENTACAO = 0 THEN 'SAIDA'
ELSE 'MOVIMENTACAO NÃO RECONHECIDA'
END AS TIPO_MOVIMENTACAO 
FROM MOVIMENTACAO MOVIMENTACAO
JOIN PRODUTO PRODUTO ON MOVIMENTACAO.ID_PRODUTO = PRODUTO.ID
JOIN DEPOSITO DEPOSITO ON MOVIMENTACAO.ID_DEPOSITO = DEPOSITO.ID
ORDER BY MOVIMENTACAO.ID DESC, PRODUTO.NOME_PRODUTO, DEPOSITO.NOME_DEPOSITO;

SELECT * FROM MOVIMENTACAO_GERAL;

/* View que mostra os depósito com todos os seus produtos cadastrados*/

CREATE VIEW DEPOSITO_PRODUTOS AS
SELECT DEPOSITO.NOME_DEPOSITO, PRODUTO.NOME_PRODUTO, DP.PONTO_REPOSICAO, DP.QTD_ATUAL
FROM DEPOSITO_PRODUTO DP
JOIN DEPOSITO DEPOSITO ON DP.ID_DEPOSITO = DEPOSITO.ID
JOIN PRODUTO PRODUTO ON DP.ID_PRODUTO = PRODUTO.ID
ORDER BY DEPOSITO.NOME_DEPOSITO;

SELECT * FROM DEPOSITO_PRODUTOS;

/* View que mostra os fornecedores com todos os seus produtos cadastrados*/

CREATE VIEW FORNECEDOR_PRODUTOS AS
SELECT FORNECEDOR.NOME_FORNECEDOR, PRODUTO.NOME_PRODUTO, PRODUTO.MARCA_PRODUTO, PRODUTO.PRECO_PRODUTO
FROM FORNECEDOR_PRODUTO FP
JOIN FORNECEDOR FORNECEDOR ON FP.ID_FORNECEDOR = FORNECEDOR.ID
JOIN PRODUTO PRODUTO ON FP.ID_PRODUTO = PRODUTO.ID
ORDER BY FORNECEDOR.NOME_FORNECEDOR;

SELECT * FROM FORNECEDOR_PRODUTOS;

/* Procedure que recebe o ID do deposito e retorna a quantidade atual de cada produto que ele possui e o ponto de reposição*/

DELIMITER //

CREATE PROCEDURE QTD_ATUAL_DEPOSITO (IN ID_ESCOLHIDO INT)
BEGIN 
	SELECT DEPOSITO.NOME_DEPOSITO, PRODUTO.NOME_PRODUTO, DP.QTD_ATUAL, DP.PONTO_REPOSICAO
	FROM DEPOSITO_PRODUTO DP
	JOIN PRODUTO PRODUTO ON DP.ID_PRODUTO = PRODUTO.ID
	JOIN DEPOSITO DEPOSITO ON DP.ID_DEPOSITO = DEPOSITO.ID
	WHERE DP.ID_DEPOSITO = ID_ESCOLHIDO
	GROUP BY  DEPOSITO.NOME_DEPOSITO, PRODUTO.NOME_PRODUTO, DP.QTD_ATUAL, DP.PONTO_REPOSICAO
	ORDER BY  DEPOSITO.NOME_DEPOSITO;
END //

DELIMITER ;

CALL QTD_ATUAL_DEPOSITO(1);

INSERT INTO MOVIMENTACAO (ID_DEPOSITO, ID_PRODUTO, QTD_MOVIMENTACAO, TIPO_MOVIMENTACAO) VALUES
(1, 1, 30, 0);

/* Trigger para atualizar o valor da quantidade atual de um produto sempre que houver uma nova inserção na tabela MOVIMENTACAO */

DELIMITER //

CREATE TRIGGER ATUALIZAR_QTD
AFTER INSERT ON MOVIMENTACAO
FOR EACH ROW
BEGIN
    IF NEW.TIPO_MOVIMENTACAO = 1 THEN
        UPDATE DEPOSITO_PRODUTO
        SET QTD_ATUAL = (QTD_ATUAL + NEW.QTD_MOVIMENTACAO)
        WHERE ID_DEPOSITO = NEW.ID_DEPOSITO
        AND ID_PRODUTO = NEW.ID_PRODUTO;
    ELSE
        UPDATE DEPOSITO_PRODUTO
        SET QTD_ATUAL = (QTD_ATUAL - NEW.QTD_MOVIMENTACAO)
        WHERE ID_DEPOSITO = NEW.ID_DEPOSITO
        AND ID_PRODUTO = NEW.ID_PRODUTO;
    END IF;
END //

DELIMITER ;

INSERT INTO MOVIMENTACAO (ID_DEPOSITO, ID_PRODUTO, QTD_MOVIMENTACAO, TIPO_MOVIMENTACAO) VALUES
(1, 1, 20, 0);

CALL QTD_ATUAL_DEPOSITO(1);

INSERT INTO MOVIMENTACAO (ID_DEPOSITO, ID_PRODUTO, QTD_MOVIMENTACAO, TIPO_MOVIMENTACAO) VALUES
(1, 1, 35, 0);

CALL QTD_ATUAL_DEPOSITO(1);

/* View que retorna o nome e a quantidade atual total dos produtos que estão abaixo do ponto de reposição geral cadastrado no sistema */

CREATE VIEW REPOSICAO AS
SELECT DEPOSITO.NOME_DEPOSITO, PRODUTO.NOME_PRODUTO, DP.QTD_ATUAL, DP.PONTO_REPOSICAO
FROM DEPOSITO_PRODUTO DP
JOIN PRODUTO PRODUTO ON DP.ID_PRODUTO = PRODUTO.ID
JOIN DEPOSITO DEPOSITO ON DP.ID_DEPOSITO = DEPOSITO.ID
WHERE DP.QTD_ATUAL < DP.PONTO_REPOSICAO
ORDER BY DEPOSITO.NOME_DEPOSITO;

SELECT * FROM REPOSICAO;

INSERT INTO MOVIMENTACAO (ID_DEPOSITO, ID_PRODUTO, QTD_MOVIMENTACAO, TIPO_MOVIMENTACAO) VALUES
(2, 5, 7, 0);

SELECT * FROM REPOSICAO;

/* Adicionando índices as colunas mais utilizadas nas consultas para tentar melhorar o desempenho das consultas */

CREATE INDEX IDX_NOME_DEPOSITO ON DEPOSITO(NOME_DEPOSITO);
CREATE INDEX IDX_NOME_PRODUTO ON PRODUTO(NOME_PRODUTO);
CREATE INDEX IDX_QTD_MOVIMENTACAO ON MOVIMENTACAO(QTD_MOVIMENTACAO);
CREATE INDEX IDX_QTD_ATUAL ON DEPOSITO_PRODUTO(QTD_ATUAL);

/* Usuário chamado funcionario_basico para fazer consultas nas views do banco para gerar relatórios do estado atual do sistema 
e fazer novas inserções na tabela MOVIMENTACAO atráves da role loja_basico.*/

CREATE USER 'funcionario_basico'@'localhost' IDENTIFIED BY '12345';

CREATE ROLE 'loja_basico';

GRANT SELECT ON LOJA_CELULAR.MOVIMENTACAO_GERAL TO 'loja_basico';
GRANT SELECT ON LOJA_CELULAR.DEPOSITO_PRODUTOS TO 'loja_basico';
GRANT SELECT ON LOJA_CELULAR.REPOSICAO TO 'loja_basico';
GRANT EXECUTE ON PROCEDURE LOJA_CELULAR.QTD_ATUAL_DEPOSITO TO 'loja_basico';
GRANT INSERT ON LOJA_CELULAR.MOVIMENTACAO TO 'loja_basico';

GRANT 'loja_basico' TO 'funcionario_basico'@'localhost';

/* Usuário chamado funcionario_avancado. Ele poderá manipular as demais tabelas sem restrições.*/

CREATE USER 'funcionario_avancado'@'localhost' IDENTIFIED BY '67890';

CREATE ROLE 'loja_manipular';

GRANT SELECT ON LOJA_CELULAR.MOVIMENTACAO_GERAL TO 'loja_manipular';
GRANT SELECT, INSERT, UPDATE, DELETE ON LOJA_CELULAR.PRODUTO TO 'loja_manipular';
GRANT SELECT, INSERT, UPDATE, DELETE ON LOJA_CELULAR.FORNECEDOR TO 'loja_manipular';
GRANT SELECT, INSERT, UPDATE, DELETE ON LOJA_CELULAR.DEPOSITO TO 'loja_manipular';
GRANT SELECT, INSERT, UPDATE, DELETE ON LOJA_CELULAR.FORNECEDOR_PRODUTO TO 'loja_manipular';
GRANT SELECT, INSERT, UPDATE, DELETE ON LOJA_CELULAR.DEPOSITO_PRODUTO TO 'loja_manipular';

GRANT 'loja_manipular' TO 'funcionario_avancado'@'localhost';